package com.jkzzk.desing.principle;
/*
* 设计原则
* */
public class principle {
    /*
    *   开闭原则：
    *       一个软件实体如类、模块和函数应该对扩展开放，对修改关闭
    *       用抽象构建框架，用实现扩展细节
    *       优点：提高系统的可复用性及可维护性
    * */

    /*
    *   依赖导致原则 ：
    *       高层模块不应该依赖底层模块二者都应该依赖其抽象
    *       抽象不应该依赖细节，细节应该依赖抽象
    *       针对接口编程，不要针对实现编程
    *       优点：
    *           可以减少类之间的耦合性、提高系统的稳定性，提高代码的可读性和可维护性
    *           可以降低修改程序所造成的风险
    * */

    /*
    *   单一原则：
    *       不要存在多余一个导致类变更的原因
    *       一个类/接口/方法只负责一项职责
    *       优点：
    *           降低类的复杂度、提高类的可读性
    *           提高系统的的可维护性、降低变更引起的的风险
    * */

    /*
    *   接口隔离原则：
    *       一个类对一个类的依赖，应该建立在最小的接口上
    *       建立单一接口不要建立庞大臃肿的接口
    *       尽量细化接口，接口中的方法尽量少
    *       优点：
    *           高内聚低耦合，提高扩展性、可读性、可维护性
    * */

    /*
    *   迪米特原则（最少知道原则）
    *       一个对象应该对其他对象保持最少的了解，
    *       降低类之间的耦合
    *       优点：
    *           降低类之间的耦合
    *
    *       朋友类： 成员变量、方法参数、方法返回值
    * */
}
